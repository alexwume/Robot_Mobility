function [F_motor,M_motor,rpm_motor_dot,flag] = motor_model(F,M,rpm,params,flag)

% Input parameters
% 
%   F,M: required force and moment
%
%   motor_rpm: current motor RPM
%
%   params: Quadcopter parameters
%
% Output parameters
%
%   F_motor: Actual thrust generated by Quadcopter's Motors
%
%   M_motor: Actual Moment generated by the Quadcopter's Motors
%
%   rpm_dot: Derivative of the RPM
%
%************ MOTOR MODEL ************************

% Write code here


ct=params.thrust_coefficient;
d=params.arm_length;
cq=params.moment_scale;
km=params.motor_constant;
Ma=[ct ct ct ct;
    0 d*ct 0 -d*ct;
    -d*ct 0 d*ct 0;
    -cq cq -cq cq];

%omega_square_desire=inv(Ma)*[F;M];
omega_d=sqrt(inv(Ma)*[F;M]);
if omega_d > params.rpm_max
    omega_d=params.rpm_max;
end
if omega_d < params.rpm_min
    omega_d=params.rpm_min;
end
%omega_desire=[omega_d(1);-omega_d(2);omega_d(3);-omega_d(1)]

%outputs
result=Ma*((rpm).^2);
%realistic thrust to mass ratio


F_motor=result(1);
    
    
    if F_motor>params.mass*params.gravity
        flag=1;
    end
    
    if flag==0 && F_motor< params.mass*params.gravity
         F_motor=params.mass*params.gravity;
    end
     
    if F_motor> params.mass*2.6*params.gravity
          F_motor=params.mass*2.6*params.gravity;
    end
    
M_motor=result(2:4);

%rpm_dot=km*(w_d-w)
rpm_motor_dot=km*(omega_d-rpm);


end
